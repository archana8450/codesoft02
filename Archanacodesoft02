#include <iostream>
#include <vector>

// Function prototypes
void displayBoard(const std::vector<std::vector<char>> &board);
bool makeMove(std::vector<std::vector<char>> &board, char player, int row, int col);
bool checkWin(const std::vector<std::vector<char>> &board, char player);
bool checkDraw(const std::vector<std::vector<char>> &board);
void switchPlayer(char &currentPlayer);
bool playAgain();

int main()
{
    char currentPlayer = 'X';
    bool gameOn = true;

    do
    {
        // Initialize the 3x3 game board
        std::vector<std::vector<char>> board(3, std::vector<char>(3, ' '));

        do
        {
            // Display the current state of the board
            displayBoard(board);

            // Player input
            int row, col;
            std::cout << "Player " << currentPlayer << "'s turn. Enter row (1-3) and column (1-3): ";
            std::cin >> row >> col;

            // Check for valid move and update the board
            if (makeMove(board, currentPlayer, row - 1, col - 1))
            {
                // Check for win
                if (checkWin(board, currentPlayer))
                {
                    displayBoard(board);
                    std::cout << "Player " << currentPlayer << " wins!\n";
                    break;
                }

                // Check for draw
                if (checkDraw(board))
                {
                    displayBoard(board);
                    std::cout << "It's a draw!\n";
                    break;
                }

                // Switch players for the next turn
                switchPlayer(currentPlayer);
            }
            else
            {
                std::cout << "Invalid move! Try again.\n";
            }

        } while (gameOn);

        // Ask if players want to play again
        gameOn = playAgain();

    } while (gameOn);

    return 0;
}

// Function to display the current state of the board
void displayBoard(const std::vector<std::vector<char>> &board)
{
    std::cout << "  1 2 3\n";
    for (int i = 0; i < 3; ++i)
    {
        std::cout << i + 1 << " ";
        for (int j = 0; j < 3; ++j)
        {
            std::cout << board[i][j] << " ";
        }
        std::cout << "\n";
    }
}

// Function to make a move on the board
bool makeMove(std::vector<std::vector<char>> &board, char player, int row, int col)
{
    if (row >= 0 && row < 3 && col >= 0 && col < 3 && board[row][col] == ' ')
    {
        board[row][col] = player;
        return true;
    }
    return false;
}

// Function to check if a player has won
bool checkWin(const std::vector<std::vector<char>> &board, char player)
{
    // Check rows, columns, and diagonals
    for (int i = 0; i < 3; ++i)
    {
        if ((board[i][0] == player && board[i][1] == player && board[i][2] == player) ||
            (board[0][i] == player && board[1][i] == player && board[2][i] == player))
        {
            return true;
        }
    }

    if ((board[0][0] == player && board[1][1] == player && board[2][2] == player) ||
        (board[0][2] == player && board[1][1] == player && board[2][0] == player))
    {
        return true;
    }

    return false;
}

// Function to check if the game is a draw
bool checkDraw(const std::vector<std::vector<char>> &board)
{
    for (const auto &row : board)
    {
        for (char cell : row)
        {
            if (cell == ' ')
            {
                return false; // There is an empty cell, game is not a draw
            }
        }
    }
    return true; // All cells are filled, game is a draw
}

// Function to switch players
void switchPlayer(char &currentPlayer)
{
    currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
}

// Function to ask if players want to play again
bool playAgain()
{
    char choice;
    std::cout << "Do you want to play again? (y/n): ";
    std::cin >> choice;
    return (choice == 'y' || choice == 'Y');
}
